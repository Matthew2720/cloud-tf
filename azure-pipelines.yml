trigger:
  branches:
    include:
      - trunk

pr:
  branches:
    include:
      - trunk

pool:
  vmImage: 'ubuntu-latest'

variables:
    - group: poc_terra_lider_app-trunk

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.x'
      addToPath: true

  - script: |
      python -m pip install --upgrade pip
      pip install awscli

  - task: AWSShellScript@1
    displayName: 'Get credentials'
    inputs:
      awsCredentials: $(aws_svc)
      regionName: 'us-east-1'
      scriptType: 'inline'
      inlineScript: |
        set -euo pipefail
        echo -e '\033[m'
        echo -e '\033[0;32mFetch Temporary AWS Credentials'
        echo -e '\033[m=============================================================================='
        output=$(aws sts assume-role --role-arn arn:aws:iam::291880787236:role/terraform --role-session-name devops --duration-seconds 3600)
        AWS_ACCESS_KEY_ID=$(echo $output | jq -r '.Credentials''.AccessKeyId')
        AWS_SECRET_ACCESS_KEY=$(echo $output | jq -r '.Credentials''.SecretAccessKey')
        AWS_SESSION_TOKEN=$(echo $output | jq -r '.Credentials''.SessionToken')

        echo "Generate Credentials"
        echo "##vso[task.setvariable variable=AWS_ACCESS_KEY_ID]$AWS_ACCESS_KEY_ID"
        echo "##vso[task.setvariable variable=AWS_SECRET_ACCESS_KEY]$AWS_SECRET_ACCESS_KEY"
        echo "##vso[task.setvariable variable=AWS_SESSION_TOKEN]$AWS_SESSION_TOKEN"


  - script: |
      aws configure set aws_access_key_id $(AWS_ACCESS_KEY_ID)
      aws configure set aws_secret_access_key $(AWS_SECRET_ACCESS_KEY)
      aws configure set aws_session_token $(AWS_SESSION_TOKEN)
      aws configure set default.region us-east-1
    displayName: 'Configure AWS Session'

  - script: |
      DB_CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id liderapp-nv-credentials --query SecretString --output text)
      DB_USERNAME=$(echo $DB_CREDENTIALS | jq -r .username)
      DB_PASSWORD=$(echo $DB_CREDENTIALS | jq -r .password)

      echo "db_username = \"$DB_USERNAME\"" >> ./env/dev/terraform-dev.tfvars
      echo "db_password = \"$DB_PASSWORD\"" >> ./env/dev/terraform-dev.tfvars
      
    displayName: 'Get DB Credentials'
    workingDirectory: $(System.DefaultWorkingDirectory)

  - script: |
      curl -LO https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip
      unzip terraform_1.6.6_linux_amd64.zip
      sudo mv terraform /usr/local/bin/
    displayName: 'Terraform Instalation'
  
  - script: |
      terraform init
    displayName: 'Terraform Init'

  - bash: |
      terraform force-unlock -force 111111 > temp.lock.id.txt 2>&1 || true
      if [ -f "temp.lock.id.txt" ]; then
        lock_info=$(cat temp.lock.id.txt)
        lock_id=$(echo "$lock_info" | grep -oP '(?<=ID:\s{8})[0-9a-zA-Z-]+')
        terraform force-unlock -force "$lock_id" || true
        echo -e '\033[m=============================================================================='
        echo -e '\033[0;32mTerraform state has been unlocked! please re-runpipeline!'
        echo -e '\033[m'
      else
        printf '%b%s%b%s%b\n' '\e[1;32m' '==> ' '\e[0m\033[1m' 'Terraform isn'\''t locked' '\e[m'
      fi
    displayName: 'Check Terraform Lock State'
    workingDirectory: $(System.DefaultWorkingDirectory)

  - bash: |
      terraform validate
    workingDirectory: $(System.DefaultWorkingDirectory)
    displayName: 'Terraform Validate'  

  - bash: |
      terraform show -json ./tfplan.binary | jq '.' > ./tfplan.json
    displayName: 'Terraform Show'
    workingDirectory: $(System.DefaultWorkingDirectory)

  - bash: |
      terraform plan --var-file="./env/$(environment)/terraform-$(environment).tfvars" --out ./tfplan.binary --input=false
    displayName: 'Terraform Plan'
    workingDirectory: $(System.DefaultWorkingDirectory)
    
  - bash: |
      terraform apply --auto-approve --var-file="./env/$(environment)/terraform-$(environment).tfvars"
    displayName: 'Terraform Apply'
    workingDirectory: $(System.DefaultWorkingDirectory)

  - bash: |
      terraform force-unlock -force 111111 > temp.lock.id.txt 2>&1 || true
      if [ -f "temp.lock.id.txt" ]; then
        lock_info=$(cat temp.lock.id.txt)
        lock_id=$(echo "$lock_info" | grep -oP '(?<=ID:\s{8})[0-9a-zA-Z-]+')
        terraform force-unlock -force "$lock_id" || true
        echo -e '\033[m=============================================================================='
        echo -e '\033[0;32mTerraform state has been unlocked! please re-runpipeline!'
        echo -e '\033[m'
      else
        printf '%b%s%b%s%b\n' '\e[1;32m' '==> ' '\e[0m\033[1m' 'Terraform isn'\''t locked' '\e[m'
      fi
    displayName: 'Check Terraform Lock State'
    workingDirectory: $(System.DefaultWorkingDirectory)